procedure mod {num1 num2 res}
{
	expression res {num1 - floor(num1 / num2) * num2}
}

% For a given iteration and type of figure, function calculates the angle of an arc
% type = 0: bottom-left and top-right arcs on a blue figure
% type = 1: bottom-right and top-left arcs on a blue figure
% type = 2: purple figure
procedure calculate_angle {iteration type res_angle}
{
	if_then_else {type == 0} {
		% 1620 iterations = growing by 360 degrees + (225 + 360 + 315 pause) + decreases by 360 degrees

		% determines the angle by position in current period of movement
		call mod {iteration 1620 res_angle}		
		if_then_else {res_angle < 360 || res_angle > 1620 - 360} {
			if_then_else {res_angle > 1620 - 360} { % increase or decrease the angle
				expression res_angle {-(res_angle - (1620 - 360))}
			} { }
		} { % pause
			expression res_angle {359.9} %temporary fix for fillarc bug
		}
	} {
	if_then_else {type == 1} {
		% 1620 iterations = (585 pause) + growing by 360 degrees + decreases by 360 degrees + (315 pause)

		% determines the angle by position in current period of movement
		call mod {iteration 1620 res_angle}
		if_then_else {res_angle <= 585  || res_angle >= 1620 - 315} { %pause
			expression res_angle {0}
		} {
			if_then_else {res_angle > 585 && res_angle < 585 + 360} { % increase the angle
				expression res_angle {res_angle - 585}
			} { % decrease the angle
				expression res_angle {-(res_angle - 585 - 360)}
			}
		}
	} { % type = 2
		call mod {iteration 720 res_angle}
		if_then_else {res_angle > 360} { %decrease the angle
			expression res_angle {-res_angle + 360}	
		} { }
	}
	}
}

% draws a blue or purple figure depending on the type of figure
% type = 0: draw purple figure
% type = 1: draw blue figure
procedure draw {x y size ang type}
{
	% type = 0: purple figure (calculate the angle of a purple figure)
	% type = 1: blue figure (calculate angles of a blue figure)
	if_then_else {type == 1} {
		number type1 0
		number type2 1
	} {
		number type1 2
		number type2 2 
	}

	call calculate_angle {ang type1 ang1}
	call calculate_angle {ang type2 ang2}

	% bottom left point
	number x1 x
	number y1 y
	point P1 x1 y1

	% bottom right point
	number x2 x1
	number y2 y1
	expression x2 {x1 + size}
	point P2 x2 y2

	% top left point
	number x3 x1
	number y3 y1
	expression y3 {y1 + size}
	point P3 x3 y3

	% top right point
	number x4 x1
	number y4 y1
	expression x4 {x1 + size}
	expression y4 {y1 + size}
	point P4 x4 y4

	% coords of the center
	expression xc {x1 + size / 2}
	expression yc {y1 + size / 2}
	point PC xc yc

	if_then_else {ang1 != 0} { % draw bottom-left and top-right arcs if the angle is different from 0
		midpoint PC1 P1 PC
		rotate  P1 PC1 -90 PC
		fillarc PC1 P1 ang1

		midpoint PC4 P4 PC
		rotate P4 PC4 -90 PC
		fillarc PC4 P4 ang1
	} { }
	
	if_then_else {ang2 != 0} { % draw bottom-right and top-left arcs if the angle is different from 0
		midpoint PC2 P2 PC
		rotate P2 PC2 -90 PC
		fillarc PC2 P2 ang2

		midpoint PC3 P3 PC
		rotate P3 PC3 -90 PC
		fillarc PC3 P3 ang2
	} { }
}

number size 15
expression width {1.54 * 7 * size}
expression height {1.54 * 7 * size}
expression x {width / 2 -  size / 2} % x coord of the starting point
expression y {height - 1.5 *  size} % y coord of the starting point
point I 0 0 6480 0 % for every frame of animation, it's increased by 20 (6480 points / 324 frames)

background 0 0 0
dim width height

number row 1 % current row
number len row % length of the current row
while {row <= 7}
{
	call mod { row 2 type } % determines type of figures in the row by row id

	number figure_id 0
	while { figure_id < len }
	{
		getx iter I
		expression addition {4 * sin(iter / 20 * 2 * 3.14 / 81)} % intensity and direction of left-right deviation (periodic: 0 -  8pi)
		
		if_then_else {type == 1} { % blue figure
			expression cur_size {size + 5 * sin(iter / 20 * 2 * 3.14 / 81)}
			expression cur_x {x + figure_id * 2 * 1.5 * size + addition}
			expression iter {iter * ceil(row/2) / 4}
			color 135 206 250
		}{ % purple figure
			expression cur_size {size + 5 * cos( iter / 20 * 2 * 3.14 / 81)}
			expression cur_x {x + figure_id * 2 * 1.5 * size - addition}
			expression iter {4/3 * iter / row}
			 color 138 43 226
		}
		
		call draw { cur_x y cur_size iter type }
		expression figure_id {figure_id + 1}
	}
	expression row {row + 1}
	expression y {y - 1.5 * size}
	
	%calculate length of the next row
	expression len {row}
	if_then_else {len > 4}
	{
		expression len {8 - len}
		expression x {x + 1.5 * size}
	} {
		expression x {x - 1.5 * size}
	}
}

animation_frames 324 50


